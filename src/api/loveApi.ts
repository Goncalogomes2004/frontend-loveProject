/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * Love API
 * API para gerir Users, Folders e Photos
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

// src/api/types.ts

export interface User {
  id?: number
  username: string
  email: string
  password_hash?: string
  created_at?: string
  updated_at?: string
}

export interface Folder {
  id: string
  name: string
  created_by: User
  cover_photo_code?: string | null
  created_at?: string
  updated_at?: string
}

export interface Photo {
  id: string
  code: string
  filename: string
  original_name: string
  uploaded_by?: User | null
  transferred_by?: User | null
  transfer_number?: number
  created_at?: string
}

export interface FolderPhoto {
  folderId: string
  photoId: string
}

export interface PhotoDownload {
  photoId: string
  userId: string
  downloaded_at?: string
}

let baseURL = "https://api.randomrestaurante.pt/";
if (typeof window !== "undefined") {
  const url = window.location.host;
  if (url.includes(":5173")) {
    baseURL = `http://${window.location.hostname}:3000`;
  }
}


// Instância axios configurada
const api: AxiosInstance = axios.create({
  baseURL,
  headers: { "Content-Type": "application/json" },
});

export const getLoveAPI = () => {
  // ----- USERS -----
  const usersControllerCreate = async (data: User, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> => {
    return api.post(`/users`, data, options);
  };

  const usersControllerFindAll = async (options?: AxiosRequestConfig): Promise<AxiosResponse<User[]>> => {
    return api.get(`/users`, options);
  };

  const usersControllerFindOne = async (id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> => {
    return api.get(`/users/${id}`, options);
  };

  const usersControllerUpdate = async (id: string, data: Partial<User>, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> => {
    return api.put(`/users/${id}`, data, options);
  };

  const usersControllerRemove = async (id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return api.delete(`/users/${id}`, options);
  };

  // ----- FOLDERS -----
  const foldersControllerCreate = async (data: Folder, options?: AxiosRequestConfig): Promise<AxiosResponse<Folder>> => {
    return api.post(`/folders`, data, options);
  };

  const foldersControllerFindAll = async (options?: AxiosRequestConfig): Promise<AxiosResponse<Folder[]>> => {
    return api.get(`/folders`, options);
  };

  const foldersControllerFindOne = async (id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Folder>> => {
    return api.get(`/folders/${id}`, options);
  };

  const foldersControllerUpdate = async (id: string, data: Partial<Folder>, options?: AxiosRequestConfig): Promise<AxiosResponse<Folder>> => {
    return api.put(`/folders/${id}`, data, options);
  };

  const foldersControllerRemove = async (id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return api.delete(`/folders/${id}`, options);
  };

  // ----- PHOTOS -----
  const photosControllerCreate = async (data: Photo, options?: AxiosRequestConfig): Promise<AxiosResponse<Photo>> => {
    return api.post(`/photos`, data, options);
  };

  const photosControllerFindAll = async (options?: AxiosRequestConfig): Promise<AxiosResponse<Photo[]>> => {
    return api.get(`/photos`, options);
  };

  const photosControllerFindOne = async (id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Photo>> => {
    return api.get(`/photos/${id}`, options);
  };

  const photosControllerUpdate = async (id: string, data: Partial<Photo>, options?: AxiosRequestConfig): Promise<AxiosResponse<Photo>> => {
    return api.put(`/photos/${id}`, data, options);
  };

  const photosControllerRemove = async (id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return api.delete(`/photos/${id}`, options);
  };

  // ----- RELAÇÕES -----
  const folderPhotosControllerAddPhoto = async (folderId: string, photoId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return api.post(`/folder-photos/${folderId}/${photoId}`, {}, options);
  };

  const folderPhotosControllerRemovePhoto = async (folderId: string, photoId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return api.delete(`/folder-photos/${folderId}/${photoId}`, options);
  };

  const folderPhotosControllerGetPhotos = async (folderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Photo[]>> => {
    return api.get(`/folder-photos/${folderId}`, options);
  };

  // ----- DOWNLOADS -----
  const photoDownloadsControllerRecord = async (photoId: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return api.post(`/photo-downloads/${photoId}/${userId}`, {}, options);
  };

  const photoDownloadsControllerRemove = async (photoId: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
    return api.delete(`/photo-downloads/${photoId}/${userId}`, options);
  };

  const photoDownloadsControllerDownloadsForPhoto = async (photoId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any[]>> => {
    return api.get(`/photo-downloads/photo/${photoId}`, options);
  };

  const photoDownloadsControllerDownloadsForUser = async (userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any[]>> => {
    return api.get(`/photo-downloads/user/${userId}`, options);
  };

  // Retorno
  return {
    usersControllerCreate,
    usersControllerFindAll,
    usersControllerFindOne,
    usersControllerUpdate,
    usersControllerRemove,
    foldersControllerCreate,
    foldersControllerFindAll,
    foldersControllerFindOne,
    foldersControllerUpdate,
    foldersControllerRemove,
    photosControllerCreate,
    photosControllerFindAll,
    photosControllerFindOne,
    photosControllerUpdate,
    photosControllerRemove,
    folderPhotosControllerAddPhoto,
    folderPhotosControllerRemovePhoto,
    folderPhotosControllerGetPhotos,
    photoDownloadsControllerRecord,
    photoDownloadsControllerRemove,
    photoDownloadsControllerDownloadsForPhoto,
    photoDownloadsControllerDownloadsForUser,
  };
};
export type UsersControllerCreateResult = AxiosResponse<void>
export type UsersControllerFindAllResult = AxiosResponse<void>
export type UsersControllerFindOneResult = AxiosResponse<void>
export type UsersControllerUpdateResult = AxiosResponse<void>
export type UsersControllerRemoveResult = AxiosResponse<void>
export type FoldersControllerCreateResult = AxiosResponse<void>
export type FoldersControllerFindAllResult = AxiosResponse<void>
export type FoldersControllerFindOneResult = AxiosResponse<void>
export type FoldersControllerUpdateResult = AxiosResponse<void>
export type FoldersControllerRemoveResult = AxiosResponse<void>
export type PhotosControllerCreateResult = AxiosResponse<void>
export type PhotosControllerFindAllResult = AxiosResponse<void>
export type PhotosControllerFindOneResult = AxiosResponse<void>
export type PhotosControllerUpdateResult = AxiosResponse<void>
export type PhotosControllerRemoveResult = AxiosResponse<void>
export type FolderPhotosControllerAddPhotoResult = AxiosResponse<void>
export type FolderPhotosControllerRemovePhotoResult = AxiosResponse<void>
export type FolderPhotosControllerGetPhotosResult = AxiosResponse<void>
export type PhotoDownloadsControllerRecordResult = AxiosResponse<void>
export type PhotoDownloadsControllerRemoveResult = AxiosResponse<void>
export type PhotoDownloadsControllerDownloadsForPhotoResult = AxiosResponse<void>
export type PhotoDownloadsControllerDownloadsForUserResult = AxiosResponse<void>
